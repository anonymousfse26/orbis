from argparse import ArgumentParser

import matplotlib.pyplot as plt

import sys
import re


def make_coverage_every_second(fl, result):
    csv_data = list(open(fl, 'r', newline=''))
    times = []
    covs = []
    for dt in csv_data:
        tmp = dt.split(',')
        if tmp[0].isdigit() and tmp[1].isdigit():
            times.append(int(tmp[0]))
            covs.append(int(tmp[1]))
        else:
            continue

    tmp_cov = 0
    for t in range(len(result)):
        if t in times:
            idx = times.index(t)
            result[t] = covs[idx]
            tmp_cov = covs[idx]
        else:
            result[t] = tmp_cov

    return result


def check_max(files):
    max_total = 0
    for f in files:
        csv_data = list(open(f, 'r', newline=''))
        times = []
        for dt in csv_data:
            tmp = dt.split(',')
            if tmp[0].isdigit():
                times.append(int(tmp[0]))
            else:
                continue

        if max(times) > max_total:
            max_total = max(times)
    
    return max_total


def graph_generator(time_budget, coverages, labels, name, graph):
    markers = ['o', 's', 'D', '^', '*']
    linestyle = ['solid', 'dotted', 'dashed', 'dashdot', (0, (3,1,1,1))]
    colors = [(0, 0.3, 1), 'tab:purple', 'tab:orange', 'tab:green', 'tab:red']

    results_in_budget = []
    times = []

    for result in coverages:
        cov = result[:time_budget]
        results_in_budget.append(cov)
        times.append([i / 3600 for i in range(len(cov))])
    
    for c in range(len(results_in_budget)):
        line, = plt.plot(times[c][:-1], results_in_budget[c][:-1], label=labels[c], linestyle=linestyle[c], marker=markers[c], markevery=len(times[c])//10, color=colors[c], markeredgecolor="black", markersize=7)
        plt.plot(times[c][-1], results_in_budget[c][-1], linestyle=linestyle[c], marker=markers[c], color=colors[c], markeredgecolor="black", markersize=7)

    plt.legend(loc="lower right")

    plt.title(name)
    plt.xlabel("time(h)")
    plt.ylabel("The Number of Covered Branches")
    plt.tick_params(axis='both')

    plt.grid(visible=True, linestyle="--", linewidth = "1.5")

    plt.savefig(graph)

    print("[INFO] ParaSuit : The branch coverage results were saved in “%s” file." % (graph))



def main(*argv):
    parser = ArgumentParser()
    parser.add_argument('directories', nargs='*', type=str, metavar='DIRS',
                        help='directory generated by ParaSuit')
    parser.add_argument('--benchmark', default='Benchmark', type=str, metavar='STR',
                        help='name of benchmark (default=Benchmark)')
    parser.add_argument('--graph', default='coverage_result.png', type=str, metavar='PATH',
                        help='path to save coverage graph (default=coverage_result.png)')
    parser.add_argument('--budget', default=36000, type=int, metavar='TIME',
                        help='time budget of the coverage graph (default=36000(s))')

    args = parser.parse_args(argv)

    csv_files = []
    results = []

    for file in args.directories:
        csv_files.append("./%s/coverage.csv" % (file))
    
    max_time = check_max(csv_files) + 1
    
    for csv in csv_files:
        result = [0] * max_time
        result = make_coverage_every_second(csv, result)
        results.append(result)

    graph_generator(args.budget, results, args.directories, args.benchmark, args.graph)


if __name__ == '__main__':
    main(*sys.argv[1:])
